---
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from 'astro';
import { getCollection } from 'astro:content';

import Pagination from '@/components/Pagination.astro';
import PostPreview from '@/components/PostPreview.astro';
import { filterDrafts, sortPosts } from '@/data/posts';
import { groupTagsByCount } from '@/data/tags';
import PageLayout from '@/layouts/Page.astro';

export const getStaticPaths = (async ({ paginate }) => {
  const posts = await getCollection('posts');
  const tags = groupTagsByCount(posts);

  return tags.flatMap((t) => {
    const taggedPosts = filterDrafts(
      sortPosts(posts.filter((post) => (post.data.tags || []).includes(t.tag))),
    );

    return paginate(taggedPosts, {
      params: { tag: t.tag },
      props: { count: t.count, description: `Posts tagged "${t.tag}".` },
      pageSize: 10,
    });
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page, count, description } = Astro.props as Props;
const { tag } = Astro.params as Params;

let title = `Solomon Hawk - Writing Tag ${tag}`;
let permalink = new URL(Astro.url.pathname, Astro.site);
---

<PageLayout content={{ title, description, permalink }}>
  <section slot="main">
    <h2 class="h1 mb-heading-lg md:mb-heading-xl">
      <span class="sr-only">Writing Tag {tag}, Page {page.currentPage}</span>
      <span aria-hidden="true">
        <span class="text-green-500">.</span><span class="text-gray-500"
          >0x</span
        >WR171N6/T465/{tag}{page.currentPage > 1 ? `/${page.currentPage}` : ''}
        <span class="text-gray-500">({count} post{count === 1 ? '' : 's'})</span
        >
      </span>
    </h2>

    <div class="space-y-8 md:space-y-12">
      {page.data.map((post) => <PostPreview post={post} />)}
    </div>

    <Pagination url={page.url} />
  </section>
</PageLayout>
