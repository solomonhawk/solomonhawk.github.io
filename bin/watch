#!/usr/bin/env node

var BrowserSync = require('browser-sync')
var History     = require('connect-history-api-fallback')
var Webpack     = require('webpack')
var WebpackDev  = require('webpack-dev-middleware')
var WebpackHot  = require('webpack-hot-middleware')
var config      = require('../config/webpack')
var exec        = require('child_process').exec

// Hot Module Replacement
config.entry.unshift('webpack-hot-middleware/client')

config.plugins.push(
  // Occurence ensures consistent build hashes
  new Webpack.optimize.OccurenceOrderPlugin(),
  // Enables Hot Module Replatement
  new Webpack.HotModuleReplacementPlugin(),
  // handle errors more cleanly
  new Webpack.NoErrorsPlugin()
)

var compiler = Webpack(config)

// This is where BrowserSync will serve files.
// It should equal the build directory
var BASE_DIR = process.argv[2]

// This is the command that will run when browser-sync detects
// a change
var BUILD_COMMAND = process.argv[3]

BrowserSync({
  ghostMode : false,
  notify    : false,
  open      : false,
  port      : process.env.PORT || 3000,

  watchOptions: {
    ignored    : /([\/\\]\.|\.map)/,
    usePolling : true
  },

  files: [
    {
      match: [ 'src/**/*' ],
      fn: function (event, file) {
        if (event === 'change') {
          exec(BUILD_COMMAND, function (error, stdout, stderr) {
            if (stdout) console.log(stdout)
            if (stderr) console.error(stdout)
            if (error !== null) console.error(error)
          })
        }
      }
    }
  ],

  server: {
    baseDir    : BASE_DIR,
    middleware : [
      WebpackDev(compiler, config.devServer),
      WebpackHot(compiler),
      History()
    ]
  }
})
